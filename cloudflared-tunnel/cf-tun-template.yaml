---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: CF-TUN-NAME
  namespace: DESIRED_NAMESPACE
spec:
  selector:
    matchLabels:
      app: CF-TUN-NAME
  replicas: 2 # You could also consider elastic scaling for this deployment
  template:
    metadata:
      labels:
        app: CF-TUN-NAME
    spec:
      containers:
      - name: CF-TUN-NAME
        image: cloudflare/cloudflared:latest
        args:
        - tunnel
        # Points cloudflared to the config file, which configures what
        # cloudflared will actually do. This file is created by a ConfigMap
        # below.
        - --config
        - /etc/cloudflared/config/config.yaml
        - run
        livenessProbe:
          httpGet:
            # Cloudflared has a /ready endpoint which returns 200 if and only if
            # it has an active connection to the edge.
            path: /ready
            port: 2000
          failureThreshold: 1
          initialDelaySeconds: 10
          periodSeconds: 10
        volumeMounts:
        - name: config
          mountPath: /etc/cloudflared/config
          readOnly: true
        # Each tunnel has an associated "credentials file" which authorizes machines
        # to run the tunnel. cloudflared will read this file from its local filesystem,
        # and it'll be stored in a k8s secret.
        - name: creds
          mountPath: /etc/cloudflared/creds
          readOnly: true
      volumes:
      - name: creds
        secret:
          # By default, the credentials file will be created under ~/.cloudflared/<tunnel ID>.json
          # when you run `cloudflared tunnel create`. You can move it into a secret by using:
          # ```sh
          # kubectl create secret generic tunnel-credentials \
          # --from-file=credentials.json=/Users/yourusername/.cloudflared/<tunnel ID>.json
          # ```
          # Or you can get the tunnel jwt token from Cloudflare Zero Trust dashboard. Run
          # ```sh
          # cftun-token-to-json.sh JWT_TOKEN_FROM_ZERO_TRUST_DASHBOARD > credentials.json
          # kubectl create secret generic tunnel-credentials \
          # --from-file=credentials.json
          # ```
          # https://github.com/hongyanca/shell-script-utilities/blob/main/cf-tun-secret/cftun-token-to-json.sh
          secretName: CF-TUN-NAME
      # Create a config.yaml file from the ConfigMap below.
      - name: config
        configMap:
          name: CF-TUN-NAME
          items:
          - key: config.yaml
            path: config.yaml
---
# This ConfigMap is just a way to define the cloudflared config.yaml file in k8s.
# It's useful to define it in k8s, rather than as a stand-alone .yaml file, because
# this lets you use various k8s templating solutions (e.g. Helm charts) to
# parameterize your config, instead of just using string literals.
apiVersion: v1
kind: ConfigMap
metadata:
  name: CF-TUN-NAME
  namespace: DESIRED_NAMESPACE
data:
  config.yaml: |
    # Name of the tunnel you want to run
    tunnel: CF-TUN-NAME
    credentials-file: /etc/cloudflared/creds/credentials.json
    # Serves the metrics server under /metrics and the readiness server under /ready
    metrics: 0.0.0.0:2000
    no-autoupdate: true
    # The `ingress` block tells cloudflared which local service to route incoming
    # requests to.
    ingress:
    # The first rule proxies traffic to the httpbin sample Service defined in app.yaml
    - hostname: PUBLIC_HOSTNAME
      service: PROTOCAL_SVC_PORT
    # This rule matches any traffic which didn't match a previous rule, and responds with HTTP 404.
    - service: http_status:404
